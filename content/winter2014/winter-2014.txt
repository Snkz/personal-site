Winter 2014:

<a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">I want to do this, what a gorgeous map.</a>
<a href="http://www.cs.utah.edu/~elb/folklore/mel.html">Story of /the/ real programmer, classic.</a>
<a href="http://simonschreibt.de/gat/homeworld-2-backgrounds/">Sometimes i forget game programmers are geniouses.</a>
<a href="http://www.junkship.net/News/2014/02/02/my-god-its-full-of-stars">DirectX? Starfield generation that looks perrff.</a>
<a href="http://www.cs.toronto.edu/~mangas/teaching/320/assignments/a2/Criminisi_cvpr2003.pdf">Inpainting thing we implemented in third year, don't think I appreciated it enough.</a>
<a href="http://en.wikibooks.org/wiki/OpenGL_Programming">Series of opengl tuts, includes voxel stuff.</a>
<a href="https://sites.google.com/site/letsmakeavoxelengine/">High level voxel engine tutorial.</a>
<a href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html">DirectX shader stuff, looks goooorgeous.</a>
<a href="http://www.flipcode.com/archives/Realtime_Voxel_Landscape_Engines-Part_2_Rendering_the_Landscapes_Structure.shtml">Raytracing overview, i'll never get bored of these.</a>
<a href="http://0fps.net/2012/07/12/smooth-voxel-terrain-part-2/">Well this guys a beast, marching cubes/isosurface explaination.</a>
<a href="http://paulbourke.net/geometry/polygonise/">The most famous marching cubes implementation.</a>

<br/>

Planet generation, shaders, and hopefully some cameras.
<br/>

Limit your sources of information, avoid browsing for the sake of browsing. Retrain yourself to /not/ multitask! 
