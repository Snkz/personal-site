Sep 29 2024:
RTS and me

I generally avoid talking about my professional life here. Mostly because I'd like to define myself by the work I do on my free time. However with how the industry has been going and some recent success with my work I've had a change of heart. It's about 10 years of professional game devolpement for me and about 8 of those years are on RTS. An incredibly rare work history in my opinion, even amoung game developers. So why not share some experiences?

I specialize in RTS AI, think the logic responsible for controlling the enemy player in 1v1 skirmish matches and campaigns. I've been doing this type of work at my current position at Relic for about 6 years, generally being the main architect for COH3 AI. There are many unique challenges that come with the type of game. Territory control, unit micro and preservation. and a whole range of unique and ever evolving player and unit abilities. Generally when devloping AI of this type, my main thought is to cover how to design systems that can evolve with changing design and iterative engine work.

From the prespective of RTS game development, AI generally follows design and gameplay work, similar to UI. This means AI is highly dependant on the completion of many other disciplines work to really come online fully. Even in the case of campaigns, AI while a core part of the final product, is not actually driving the design. Often AI will limit or suggest certain features however. For COH, AI goals were decided based on campaign goals meaning the architecture of the AI was really heavily influenced by most other disciplines work.

For me personally, i've always been a fan of using layered behaviour trees. Representing different strategic layers with their own "brain" feels pretty natural. Along with many core systems to track important states (think systems that would fill AI blackboards), constructing these layers generally gives a good seperation of work to really keep states manageable. Behaviour trees are usually associated with action type games where a single entities "brain" is controlled by a bespoke tree, but ever since my time at Artillery i've found it pretty natural to map trees to different strategic goals of an RTS player. For example at Artillery working on Project Atlas, a players unit and base management was mapped to a behaviour tree, encapsulating just the problems of building and deciding what groups of units should go after what objective. While another brain would be responsible for managing that groups of units behaviours towards completing these various objectives. Finally a third brain to manage just the "hero" type unit for the game as Atlas was essentially a Warcraft 3 like RTS. This pattern of encapsulating large descision spaces to behaviour trees has been a core part of my work over the years.

Finally the most essential part of my day to day work really is about the iterative design process of fine tuning AI for the current game. At Relic this is a constant battle of matching the ever changing gameplay during and post launch. Constant playtesting with strong players is needed for this and good tools for testing changes is crucial to ensure no knock on affects are had. Unsurprisingly making AI changes is very tricky as minor changes can generally have really unexpected knockon affects. Changing what a unit prefers to target in X scenario might cause Y scenario to never happen, or Z scenario to come up 10% more often causing some minor oscilation that occured before to happen way more often for example. Good and simple behaviour tree architecture is what I strive for to avoid changes have wide unknown affects. With more game knowledge also, better systems can be written to track more subtle game states as well. Better systems allow for simpler queries which allow for simpler trees.

Outside of this, theres also the general work of keeping the AI performant and dealing with networking related issues. How is AI the in multiplier games synchronized? What does it mean for AI to be performant? These questions are answered by the specifics of the game engine and the games requirements, I work to match them per project as they come up. 

It's all been super fun and honestly every project has gotten me to become aware of yet another way to do something that has caused me headaches on the prior. With the way the industry and trends are going, I might not get the chance to continue testing out my ideas for much longer. However it's been great fun so far and I'm thankful for the work. 

Heres to another decade of it!
