August 21 2023:
Depth and Effects

Recently I did some work on my effects system and produced this: <a class="special" href="">a fake rimlight and trail effect when dashing</a>. I'd like to talk a bit about what I did to get that up. Mostly so I can remember and who knows maybe it'll be helpful for you.

The effect system for now just takes requests and does an additional render for each request into different render textures (colour AND depth swapped out) using the scene pass' framebuffer. The shader program and framebuffer are unchanged, its literally just another write to different texture targets, with additional uniforms passed in. The textures are all stored on each requesting entities, they are later combined with additional render passes.

With the request fulfilled the postprocess step kicks in and each model starts its pass, grabbing data from w/e textures it knows about. The effects texture is picked up here and used in the passes that render out the unit models to a models texture. The texture is built out in three phases. 

First the effects texture is built by processing each models effects texture independatly, adding in additional gameplay effects on top of what was already drawn on the texture via the requested effect draw calls. Things like the white flash when a unit is hit and unit occlusion effects are done here. The effect depth data is made writtable here but not really updated unfortunately. This leads to some issues which I can hopefully resolve later... model data can be drawn behind some other units effects based on depth, ideally model data is always on top of any effect but that data is not prepared yet by the time of this pass

Second the model textures are built by taking the model pass and apply data from these effects. The texture colour data is read and whenever the effect texture has data, its is placed on top. To ensure effect data stays rendered at the correct depth as well, the models depth data is made writable and data is written when appropiate. If theres effects data present and the model has no data, its depth is used and stored in the models depth.

This process of updating depth data while reading it is made possible by this patten.
<p class="code"><br/>glEnable(GL_DEPTH_TEST);<br/>glDepthMask(true);<br/>glDepthFunc(GL_ALWAYS);<br/></p>
Its important the depth test pass is active so writes are available but the testing function is always set to pass, allowing us to look at all fragaments.

Finally the composite unit texture is built, taking all the model textures and applying them to one final texture that will eventually be pasted on top of the scene. We use the depth data for all models in order to determine when one fragment should be overriden by another. This means the order we process models does not matter for the final unit texture.

These seperate passes allow a ton of flexibility that we would not be able to get by simply writing to the final scene buffer immediately at the cost of multiple writes. Gameplay can effect rendering independalty of the render system knowing about every gameplay element. The effect system is made responsbile for dealing with gameplay alone and how to itterate on effects is made independant of the broader rendering system which is nice for ... future me.

Hopefully this post is also cause it took me too long to organize this!
